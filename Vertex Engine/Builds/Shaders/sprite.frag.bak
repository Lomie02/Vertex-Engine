#version 330 core
in vec2 TexCoords;
out vec4 color;

uniform sampler2D image;
uniform vec4 Colour;
uniform int UseDepth;

in vec3 _worldNormals;
uniform int UseLights = 0;
uniform vec3 lights;

// Chromatic & Invert
uniform int UseChromatic = 0;
uniform int UseInvert = 0;
uniform float ChromaticOffset = 0.01;

// Blur
uniform int UseBlur = 1;
uniform float xs,ys = 1080;
uniform float r = 5;

float near = 0.1;
float far = 100.0f;
vec3 worldSpaceNormals;

float LinearizeDepth(float depth)
{
	float z = depth * 2.0 - 1.0;
	return (2.0 * near * far) / (far + near - z * (far - near));
}

void main()
{    
	 worldSpaceNormals.x = 1 ;
	worldSpaceNormals.y = 1;
	worldSpaceNormals.z = 1;
	
	// Blur Calulations
	if(UseDepth == 0)
	{
		if(UseLights == 1)
		{
			float lightVal = max(dot(_worldNormals, lights), 0.0);
			color += vec4(Colour) * texture(image, TexCoords) * lightVal;
		}
		else // Chromatic Arb Filter
		{
			if(UseChromatic == 0){ //Chromattic Calulations
		
				float r = texture(image, TexCoords + vec2(ChromaticOffset,ChromaticOffset)).x;
				float g = texture(image, TexCoords).y;
				float b = texture(image, TexCoords - vec2(ChromaticOffset,ChromaticOffset)).z;
				float a = texture(image, TexCoords).w;
			
				vec4 ArbColour;
				ArbColour.x = r;
				ArbColour.y = g;
				ArbColour.z = b;
				ArbColour.w = a;
			
				color = vec4(Colour) * ArbColour;
			}
			else if(UseInvert == 1) // Invert Filter
			{
				vec4 Inverted;
				Inverted.x = texture(image, TexCoords).x;
				Inverted.y = texture(image, TexCoords).y;
				Inverted.z = texture(image, TexCoords).z;
				Inverted.w = 0.0f;
				
				color = vec4(Colour) - Inverted;
			}
			else // Normal Rendering
			{
					color = vec4(Colour) * texture(image, TexCoords);
				
			}
		}
		
	}
	else // Rendering Depth Test
	{
		float depth = LinearizeDepth(gl_FragCoord.z) / far;
		color = vec4(vec3(depth),1.0);
	}
}  